// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Transaction extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Transaction entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Transaction must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Transaction", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): Transaction | null {
    return changetype<Transaction | null>(
      store.get("Transaction", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get hash(): Bytes {
    let value = this.get("hash");
    return value!.toBytes();
  }

  set hash(value: Bytes) {
    this.set("hash", Value.fromBytes(value));
  }

  get index(): BigInt {
    let value = this.get("index");
    return value!.toBigInt();
  }

  set index(value: BigInt) {
    this.set("index", Value.fromBigInt(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value!.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get to(): Bytes | null {
    let value = this.get("to");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set to(value: Bytes | null) {
    if (!value) {
      this.unset("to");
    } else {
      this.set("to", Value.fromBytes(<Bytes>value));
    }
  }

  get value(): BigInt {
    let value = this.get("value");
    return value!.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get gasLimit(): BigInt {
    let value = this.get("gasLimit");
    return value!.toBigInt();
  }

  set gasLimit(value: BigInt) {
    this.set("gasLimit", Value.fromBigInt(value));
  }

  get gasPrice(): BigInt {
    let value = this.get("gasPrice");
    return value!.toBigInt();
  }

  set gasPrice(value: BigInt) {
    this.set("gasPrice", Value.fromBigInt(value));
  }

  get input(): Bytes {
    let value = this.get("input");
    return value!.toBytes();
  }

  set input(value: Bytes) {
    this.set("input", Value.fromBytes(value));
  }

  get nonce(): BigInt {
    let value = this.get("nonce");
    return value!.toBigInt();
  }

  set nonce(value: BigInt) {
    this.set("nonce", Value.fromBigInt(value));
  }
}

export class TransactionReceipt extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TransactionReceipt entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type TransactionReceipt must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("TransactionReceipt", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): TransactionReceipt | null {
    return changetype<TransactionReceipt | null>(
      store.get("TransactionReceipt", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get blockHash(): Bytes {
    let value = this.get("blockHash");
    return value!.toBytes();
  }

  set blockHash(value: Bytes) {
    this.set("blockHash", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get cumulativeGasUsed(): BigInt | null {
    let value = this.get("cumulativeGasUsed");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set cumulativeGasUsed(value: BigInt | null) {
    if (!value) {
      this.unset("cumulativeGasUsed");
    } else {
      this.set("cumulativeGasUsed", Value.fromBigInt(<BigInt>value));
    }
  }

  get gasUsed(): BigInt {
    let value = this.get("gasUsed");
    return value!.toBigInt();
  }

  set gasUsed(value: BigInt) {
    this.set("gasUsed", Value.fromBigInt(value));
  }

  get contractAddress(): Bytes | null {
    let value = this.get("contractAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set contractAddress(value: Bytes | null) {
    if (!value) {
      this.unset("contractAddress");
    } else {
      this.set("contractAddress", Value.fromBytes(<Bytes>value));
    }
  }

  get status(): BigInt | null {
    let value = this.get("status");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set status(value: BigInt | null) {
    if (!value) {
      this.unset("status");
    } else {
      this.set("status", Value.fromBigInt(<BigInt>value));
    }
  }

  get root(): Bytes | null {
    let value = this.get("root");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set root(value: Bytes | null) {
    if (!value) {
      this.unset("root");
    } else {
      this.set("root", Value.fromBytes(<Bytes>value));
    }
  }

  get logsBloom(): Bytes | null {
    let value = this.get("logsBloom");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set logsBloom(value: Bytes | null) {
    if (!value) {
      this.unset("logsBloom");
    } else {
      this.set("logsBloom", Value.fromBytes(<Bytes>value));
    }
  }

  get logs(): Array<string> {
    let value = this.get("logs");
    return value!.toStringArray();
  }
}

export class Log extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Log entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Log must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Log", id.toString(), this);
    }
  }

  static load(id: string): Log | null {
    return changetype<Log | null>(store.get("Log", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get logIndex(): BigInt {
    let value = this.get("logIndex");
    return value!.toBigInt();
  }

  set logIndex(value: BigInt) {
    this.set("logIndex", Value.fromBigInt(value));
  }

  get data(): Bytes {
    let value = this.get("data");
    return value!.toBytes();
  }

  set data(value: Bytes) {
    this.set("data", Value.fromBytes(value));
  }

  get topics(): Array<Bytes> | null {
    let value = this.get("topics");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  set topics(value: Array<Bytes> | null) {
    if (!value) {
      this.unset("topics");
    } else {
      this.set("topics", Value.fromBytesArray(<Array<Bytes>>value));
    }
  }

  get removed(): boolean {
    let value = this.get("removed");
    return value!.toBoolean();
  }

  set removed(value: boolean) {
    this.set("removed", Value.fromBoolean(value));
  }

  get transactionReceipt(): Bytes {
    let value = this.get("transactionReceipt");
    return value!.toBytes();
  }

  set transactionReceipt(value: Bytes) {
    this.set("transactionReceipt", Value.fromBytes(value));
  }
}

export class SetDapiName extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SetDapiName entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type SetDapiName must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("SetDapiName", id.toString(), this);
    }
  }

  static load(id: string): SetDapiName | null {
    return changetype<SetDapiName | null>(store.get("SetDapiName", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value!.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get logIndex(): BigInt {
    let value = this.get("logIndex");
    return value!.toBigInt();
  }

  set logIndex(value: BigInt) {
    this.set("logIndex", Value.fromBigInt(value));
  }

  get logType(): string | null {
    let value = this.get("logType");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set logType(value: string | null) {
    if (!value) {
      this.unset("logType");
    } else {
      this.set("logType", Value.fromString(<string>value));
    }
  }

  get dataFeedId(): string {
    let value = this.get("dataFeedId");
    return value!.toString();
  }

  set dataFeedId(value: string) {
    this.set("dataFeedId", Value.fromString(value));
  }

  get dapiName(): string {
    let value = this.get("dapiName");
    return value!.toString();
  }

  set dapiName(value: string) {
    this.set("dapiName", Value.fromString(value));
  }

  get sender(): string {
    let value = this.get("sender");
    return value!.toString();
  }

  set sender(value: string) {
    this.set("sender", Value.fromString(value));
  }

  get parameters(): Array<string> {
    let value = this.get("parameters");
    return value!.toStringArray();
  }

  set parameters(value: Array<string>) {
    this.set("parameters", Value.fromStringArray(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transaction(): Bytes {
    let value = this.get("transaction");
    return value!.toBytes();
  }

  set transaction(value: Bytes) {
    this.set("transaction", Value.fromBytes(value));
  }

  get transactionReceipt(): Bytes | null {
    let value = this.get("transactionReceipt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set transactionReceipt(value: Bytes | null) {
    if (!value) {
      this.unset("transactionReceipt");
    } else {
      this.set("transactionReceipt", Value.fromBytes(<Bytes>value));
    }
  }
}

export class UpdatedBeaconSetWithBeacon extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save UpdatedBeaconSetWithBeacon entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type UpdatedBeaconSetWithBeacon must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UpdatedBeaconSetWithBeacon", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): UpdatedBeaconSetWithBeacon | null {
    return changetype<UpdatedBeaconSetWithBeacon | null>(
      store.get("UpdatedBeaconSetWithBeacon", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value!.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get logIndex(): BigInt {
    let value = this.get("logIndex");
    return value!.toBigInt();
  }

  set logIndex(value: BigInt) {
    this.set("logIndex", Value.fromBigInt(value));
  }

  get logType(): string | null {
    let value = this.get("logType");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set logType(value: string | null) {
    if (!value) {
      this.unset("logType");
    } else {
      this.set("logType", Value.fromString(<string>value));
    }
  }

  get beaconSetId(): Bytes {
    let value = this.get("beaconSetId");
    return value!.toBytes();
  }

  set beaconSetId(value: Bytes) {
    this.set("beaconSetId", Value.fromBytes(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value!.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get parameters(): Array<string> {
    let value = this.get("parameters");
    return value!.toStringArray();
  }

  set parameters(value: Array<string>) {
    this.set("parameters", Value.fromStringArray(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transaction(): Bytes {
    let value = this.get("transaction");
    return value!.toBytes();
  }

  set transaction(value: Bytes) {
    this.set("transaction", Value.fromBytes(value));
  }

  get transactionReceipt(): Bytes | null {
    let value = this.get("transactionReceipt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set transactionReceipt(value: Bytes | null) {
    if (!value) {
      this.unset("transactionReceipt");
    } else {
      this.set("transactionReceipt", Value.fromBytes(<Bytes>value));
    }
  }
}

export class UpdatedBeaconWithSignedData extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save UpdatedBeaconWithSignedData entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type UpdatedBeaconWithSignedData must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set(
        "UpdatedBeaconWithSignedData",
        id.toBytes().toHexString(),
        this
      );
    }
  }

  static load(id: Bytes): UpdatedBeaconWithSignedData | null {
    return changetype<UpdatedBeaconWithSignedData | null>(
      store.get("UpdatedBeaconWithSignedData", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value!.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get logIndex(): BigInt {
    let value = this.get("logIndex");
    return value!.toBigInt();
  }

  set logIndex(value: BigInt) {
    this.set("logIndex", Value.fromBigInt(value));
  }

  get logType(): string | null {
    let value = this.get("logType");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set logType(value: string | null) {
    if (!value) {
      this.unset("logType");
    } else {
      this.set("logType", Value.fromString(<string>value));
    }
  }

  get beaconId(): Bytes {
    let value = this.get("beaconId");
    return value!.toBytes();
  }

  set beaconId(value: Bytes) {
    this.set("beaconId", Value.fromBytes(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value!.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get parameters(): Array<string> {
    let value = this.get("parameters");
    return value!.toStringArray();
  }

  set parameters(value: Array<string>) {
    this.set("parameters", Value.fromStringArray(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transaction(): Bytes {
    let value = this.get("transaction");
    return value!.toBytes();
  }

  set transaction(value: Bytes) {
    this.set("transaction", Value.fromBytes(value));
  }

  get transactionReceipt(): Bytes | null {
    let value = this.get("transactionReceipt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set transactionReceipt(value: Bytes | null) {
    if (!value) {
      this.unset("transactionReceipt");
    } else {
      this.set("transactionReceipt", Value.fromBytes(<Bytes>value));
    }
  }
}

export class UpdatedOevProxyBeaconSetWithSignedData extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save UpdatedOevProxyBeaconSetWithSignedData entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type UpdatedOevProxyBeaconSetWithSignedData must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set(
        "UpdatedOevProxyBeaconSetWithSignedData",
        id.toBytes().toHexString(),
        this
      );
    }
  }

  static load(id: Bytes): UpdatedOevProxyBeaconSetWithSignedData | null {
    return changetype<UpdatedOevProxyBeaconSetWithSignedData | null>(
      store.get("UpdatedOevProxyBeaconSetWithSignedData", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value!.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get logIndex(): BigInt {
    let value = this.get("logIndex");
    return value!.toBigInt();
  }

  set logIndex(value: BigInt) {
    this.set("logIndex", Value.fromBigInt(value));
  }

  get logType(): string | null {
    let value = this.get("logType");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set logType(value: string | null) {
    if (!value) {
      this.unset("logType");
    } else {
      this.set("logType", Value.fromString(<string>value));
    }
  }

  get beaconSetId(): Bytes {
    let value = this.get("beaconSetId");
    return value!.toBytes();
  }

  set beaconSetId(value: Bytes) {
    this.set("beaconSetId", Value.fromBytes(value));
  }

  get proxy(): Bytes {
    let value = this.get("proxy");
    return value!.toBytes();
  }

  set proxy(value: Bytes) {
    this.set("proxy", Value.fromBytes(value));
  }

  get updateId(): Bytes {
    let value = this.get("updateId");
    return value!.toBytes();
  }

  set updateId(value: Bytes) {
    this.set("updateId", Value.fromBytes(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value!.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get parameters(): Array<string> {
    let value = this.get("parameters");
    return value!.toStringArray();
  }

  set parameters(value: Array<string>) {
    this.set("parameters", Value.fromStringArray(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transaction(): Bytes {
    let value = this.get("transaction");
    return value!.toBytes();
  }

  set transaction(value: Bytes) {
    this.set("transaction", Value.fromBytes(value));
  }

  get transactionReceipt(): Bytes | null {
    let value = this.get("transactionReceipt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set transactionReceipt(value: Bytes | null) {
    if (!value) {
      this.unset("transactionReceipt");
    } else {
      this.set("transactionReceipt", Value.fromBytes(<Bytes>value));
    }
  }
}

export class UpdatedOevProxyBeaconWithSignedData extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save UpdatedOevProxyBeaconWithSignedData entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type UpdatedOevProxyBeaconWithSignedData must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set(
        "UpdatedOevProxyBeaconWithSignedData",
        id.toBytes().toHexString(),
        this
      );
    }
  }

  static load(id: Bytes): UpdatedOevProxyBeaconWithSignedData | null {
    return changetype<UpdatedOevProxyBeaconWithSignedData | null>(
      store.get("UpdatedOevProxyBeaconWithSignedData", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value!.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get logIndex(): BigInt {
    let value = this.get("logIndex");
    return value!.toBigInt();
  }

  set logIndex(value: BigInt) {
    this.set("logIndex", Value.fromBigInt(value));
  }

  get logType(): string | null {
    let value = this.get("logType");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set logType(value: string | null) {
    if (!value) {
      this.unset("logType");
    } else {
      this.set("logType", Value.fromString(<string>value));
    }
  }

  get beaconId(): Bytes {
    let value = this.get("beaconId");
    return value!.toBytes();
  }

  set beaconId(value: Bytes) {
    this.set("beaconId", Value.fromBytes(value));
  }

  get proxy(): Bytes {
    let value = this.get("proxy");
    return value!.toBytes();
  }

  set proxy(value: Bytes) {
    this.set("proxy", Value.fromBytes(value));
  }

  get updateId(): Bytes {
    let value = this.get("updateId");
    return value!.toBytes();
  }

  set updateId(value: Bytes) {
    this.set("updateId", Value.fromBytes(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value!.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get parameters(): Array<string> {
    let value = this.get("parameters");
    return value!.toStringArray();
  }

  set parameters(value: Array<string>) {
    this.set("parameters", Value.fromStringArray(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transaction(): Bytes {
    let value = this.get("transaction");
    return value!.toBytes();
  }

  set transaction(value: Bytes) {
    this.set("transaction", Value.fromBytes(value));
  }

  get transactionReceipt(): Bytes | null {
    let value = this.get("transactionReceipt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set transactionReceipt(value: Bytes | null) {
    if (!value) {
      this.unset("transactionReceipt");
    } else {
      this.set("transactionReceipt", Value.fromBytes(<Bytes>value));
    }
  }
}

export class Withdrew extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Withdrew entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Withdrew must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Withdrew", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): Withdrew | null {
    return changetype<Withdrew | null>(store.get("Withdrew", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value!.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get logIndex(): BigInt {
    let value = this.get("logIndex");
    return value!.toBigInt();
  }

  set logIndex(value: BigInt) {
    this.set("logIndex", Value.fromBigInt(value));
  }

  get logType(): string | null {
    let value = this.get("logType");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set logType(value: string | null) {
    if (!value) {
      this.unset("logType");
    } else {
      this.set("logType", Value.fromString(<string>value));
    }
  }

  get oevProxy(): Bytes {
    let value = this.get("oevProxy");
    return value!.toBytes();
  }

  set oevProxy(value: Bytes) {
    this.set("oevProxy", Value.fromBytes(value));
  }

  get oevBeneficiary(): Bytes {
    let value = this.get("oevBeneficiary");
    return value!.toBytes();
  }

  set oevBeneficiary(value: Bytes) {
    this.set("oevBeneficiary", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get parameters(): Array<string> {
    let value = this.get("parameters");
    return value!.toStringArray();
  }

  set parameters(value: Array<string>) {
    this.set("parameters", Value.fromStringArray(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transaction(): Bytes {
    let value = this.get("transaction");
    return value!.toBytes();
  }

  set transaction(value: Bytes) {
    this.set("transaction", Value.fromBytes(value));
  }

  get transactionReceipt(): Bytes | null {
    let value = this.get("transactionReceipt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set transactionReceipt(value: Bytes | null) {
    if (!value) {
      this.unset("transactionReceipt");
    } else {
      this.set("transactionReceipt", Value.fromBytes(<Bytes>value));
    }
  }
}
